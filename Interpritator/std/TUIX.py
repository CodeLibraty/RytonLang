from typing import Any, Union, Callable
import contextlib
import builtins
import termios
import time
import tty
import sys
import os
import re

emojis = {
    # –°—Ç–∞—Ç—É—Å—ã –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    'success': '‚úÖ',
    'error': '‚ùå',       'info': 'i',
    'warning': '‚ö†Ô∏è',     'debug': 'üîç',

    # –Ø–∑—ã–∫–∏ –∏ —Å—Ç—Ä–∞–Ω—ã
    'Russian': 'üá∑üá∫',     'English': 'üá∫üá∏',
    'Chinese': 'üá®üá≥',     'Japanese': 'üáØüáµ',
    'Korean': 'üá∞üá∑',      'French': 'üá´üá∑',
    'Spanish': 'üá™üá∏',     'German': 'üá©üá™',
    'Italian': 'üáÆüáπ',     'Portuguese': 'üáßüá∑',

    # –î–µ–π—Å—Ç–≤–∏—è
    'save': 'üíæ',         'edit': '‚úèÔ∏è',
    'delete': 'üóëÔ∏è',       'search': 'üîé',
    'settings': '‚öôÔ∏è',     'reload': 'üîÑ',
    'lock': 'üîí',         'unlock': 'üîì',
    
    # –§–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏
    'file': 'üìÑ',         'folder': 'üìÅ',
    'open_folder': 'üìÇ',  'zip': 'üóúÔ∏è',
    
    # –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞
    'bug': '',
    'code': 'üë®‚Äçüíª',        'rocket': 'üöÄ',
    'fire': 'üî•',         'spark': '‚ú®',
    'hammer': 'üî®',       'computer': 'üíª',

    # –ú–µ–¥–∏–∞
    'music': 'üéµ',        'video': 'üé•',
    'camera': 'üì∑',       'film': 'üé¨',

    # –°–æ–æ–±—â–µ–Ω–∏—è
    'message': 'üí¨',
    'chat': 'üó®Ô∏è',
    'comment': 'üëÅÔ∏è‚Äçüó®Ô∏è',
    
    # –í—Ä–µ–º—è
    'clock': 'üïê',        'hourglass': '‚åõ',
    'calendar': 'üìÖ',      'time': 'üïí',
    
    # –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è
    'mail': 'üìß',
    'bell': 'üîî',
    'phone': 'üì±',
    
    # –î—Ä—É–≥–∏–µ
    'wine': 'üç∑',
    'star': '‚≠ê',          'heart': '‚ù§Ô∏è',
    'check': '‚úîÔ∏è',         'cross': '‚úñÔ∏è',
    'question': '‚ùì',      'light': 'üí°',

    # –°—Ç—Ä–µ–ª–∫–∏
    'arrow_right': '‚Üí',
    'arrow_left': '‚Üê',     'arrow_up': '‚Üë',
    'arrow_down': '‚Üì',     'arrow_double': '‚Üî',
    
    # –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ
    'infinity': '‚àû',       'not_equal': '‚â†',
    'approx': '‚âà',         'plus_minus': '¬±',
    'multiply': '√ó',       'divide': '√∑',
    'sum': '‚àë',            'sqrt': '‚àö',
    
    # –õ–æ–≥–∏—á–µ—Å–∫–∏–µ
    'and': '‚àß',
    'or': '‚à®',             'xor': '‚äï',
    'forall': '‚àÄ',         'exists': '‚àÉ',
    
    # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
    'bullet': '‚Ä¢',
    'diamond': '‚óÜ',        'square': '‚ñ†',
    'circle': '‚óè',          'triangle': '‚ñ≤',
    
    # –†–∞–º–∫–∏
    'box_h': '‚îÄ',          'box_v': '‚îÇ',
    'box_dr': '‚îå',         'box_dl': '‚îê',
    'box_ur': '‚îî',         'box_ul': '‚îò',
    
    # –°—Ç–∞—Ç—É—Å—ã
    'check': '‚úì',
    'cross': '‚úó',           'star': '‚òÖ',
    'note': '‚ô™',            'warning': '‚ö†',
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    'enter': '‚èé',          'escape': '‚éã',
    'command': '‚åò',        'option': '‚å•',
    'shift': '‚áß',          'ctrl': '‚åÉ',
    
    # –£–≥–ª—ã
    'corner_dr': '‚ï≠',      'corner_dl': '‚ïÆ',
    'corner_ur': '‚ï∞',      'corner_ul': '‚ïØ',
    
    # –õ–∏–Ω–∏–∏
    'line_h': '‚îÄ',         'line_h_bold': '‚îÅ',
    'line_v': '‚îÇ',         'line_v_bold': '‚îÉ',
    
    # –¢-–æ–±—Ä–∞–∑–Ω—ã–µ
    'line_t_up': '‚î¥',      'line_t_down': '‚î¨',
    'line_t_right': '‚îú',   'line_t_left': '‚î§',
    
    # –î–≤–æ–π–Ω—ã–µ –ª–∏–Ω–∏–∏
    'double_h': '‚ïê',       'double_v': '‚ïë',
    'double_dr': '‚ïî',      'double_dl': '‚ïó',
    'double_ur': '‚ïö',      'double_ul': '‚ïù',
    
    # –ó–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ —É–≥–ª—ã
    'round_dr': '‚ï≠',       'round_dl': '‚ïÆ',
    'round_ur': '‚ï∞',       'round_ul': '‚ïØ',

    # –ü—É–Ω–∫—Ç–∏—Ä
    'dash_h': '‚îÑ',         'dash_v': '‚îÜ',
    'dash_h_bold':  '‚îÖ',   'dash_v_bold': '‚îá',
    
    # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
    'cross': '‚îº',
    'cross_bold': '‚ïã',     'cross_double': '‚ï¨'
}

def confirm(message: str) -> bool:
    """–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
    return builtins.input(f"{message} (y/n): ").lower().startswith('y')

def print(*args, clr=None, style=None, sep=' ', end='\n'):
    text = sep.join(str(arg) for arg in args)
        
    # –≠–º–æ–¥–∑–∏ –¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –ø–µ—Ä–≤—ã–º–∏
    for emoji_name, emoji_symbol in emojis.items():
        text = text.replace(f'<{emoji_name}>', emoji_symbol)

    colors = {
        'red': '\033[31m',
        'green': '\033[32m',
        'blue': '\033[34m',
        'yellow': '\033[33m',
        'magenta': '\033[35m',
        'cyan': '\033[36m',
        'white': '\033[37m'
    }
    
    style_dict = {
        'bold': '\033[1m',
        'italic': '\033[3m',
        'underline': '\033[4m'
    }
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤
    combined_pattern = r'<(.*?)\|(.*?)>'
    for match in re.finditer(combined_pattern, text):
        full_tag = match.group(0)
        tag_styles = match.group(1).split('|')
        codes = []
        for tag_style in tag_styles:
            if tag_style in colors:
                codes.append(colors[tag_style])
            if tag_style in style_dict:
                codes.append(style_dict[tag_style])
        text = text.replace(full_tag, ''.join(codes))

    # –ü–∞—Ä—Å–∏–Ω–≥ —ç–º–æ–¥–∑–∏ —Ç–µ–≥–æ–≤
    for name, emoji in emojis.items():
        text = text.replace(f'<{name}>', emoji)
    
    # –û—Å—Ç–∞–ª—å–Ω–æ–π –ø–∞—Ä—Å–∏–Ω–≥
    for tag, code in colors.items():
        text = text.replace(f'<{tag}>', code)
        text = text.replace(f'</{tag}>', '\033[0m')
    
    for tag, code in style_dict.items():
        text = text.replace(f'<{tag}>', code)
        text = text.replace(f'</{tag}>', '\033[0m')

    if clr in colors:
        text = f"{colors[clr]}{text}\033[0m"
    
    if style in style_dict:
        text = f"{styles[style]}{text}\033[0m"

    builtins.print(text, end=end)

def paint(image_data, palette=None):
    default_palette = {
        'dark': '‚ñë',
        'medium': '‚ñí',
        'light': '‚ñì',
        'full': '‚ñà',
        'dot': '‚Ä¢',
        'star': '‚òÖ',
        'square': '‚ñ†',
        'circle': '‚óè'
    }
    
    palette = palette or default_palette
    
    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if isinstance(image_data, str):
        lines = image_data.strip().split('\n')
    else:
        lines = image_data
        
    result = []
    for line in lines:
        # –ó–∞–º–µ–Ω–∞ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–∞–ª–∏—Ç—Ä—ã
        for char, symbol in palette.items():
            line = line.replace(char, symbol)
        result.append(line)
        
    return '\n'.join(result)

def get_char():
    fd = sys.stdin.fileno()
    old = termios.tcgetattr(fd)
    try:
        tty.setraw(fd)
        return sys.stdin.read(1)
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old)

def input(prompt="", clr=None, style=None, default=None, validate=None):
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º prompt —Å —Ç–µ–º–∏ –∂–µ –ø—Ä–∞–≤–∏–ª–∞–º–∏ —á—Ç–æ –∏ –≤ print
    colors = {
        'red': '\033[31m',
        'green': '\033[32m',
        'blue': '\033[34m',
        'yellow': '\033[33m',
        'magenta': '\033[35m',
        'cyan': '\033[36m',
        'white': '\033[37m'
    }
    
    style_dict = {
        'bold': '\033[1m',
        'italic': '\033[3m',
        'underline': '\033[4m'
    }

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–≥–æ–≤ –≤ prompt
    combined_pattern = r'<(.*?)\|(.*?)>'
    for match in re.finditer(combined_pattern, prompt):
        full_tag = match.group(0)
        tag_styles = match.group(1).split('|')
        codes = []
        for tag_style in tag_styles:
            if tag_style in colors:
                codes.append(colors[tag_style])
            if tag_style in style_dict:
                codes.append(style_dict[tag_style])
        prompt = prompt.replace(full_tag, ''.join(codes))

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if default:
        prompt += f" ({default})"

    buffer = []
    cursor_pos = 0
    
    sys.stdout.write(prompt)
    sys.stdout.flush()
    
    def redraw():
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É
        sys.stdout.write('\r' + prompt)
        # –í—ã–≤–æ–¥–∏–º –≤–µ—Å—å –±—É—Ñ–µ—Ä
        sys.stdout.write(''.join(buffer))
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—É—Ä—Å–æ—Ä –Ω–∞ –Ω—É–∂–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        sys.stdout.write('\r' + prompt + ''.join(buffer[:cursor_pos]))
        sys.stdout.flush()
    
    while True:
        char = get_char()
        
        if char == '\x1b':
            next1, next2 = get_char(), get_char()
            if next1 == '[':
                if next2 == 'D' and cursor_pos > 0:  # –í–ª–µ–≤–æ
                    cursor_pos -= 1
                    redraw()
                elif next2 == 'C' and cursor_pos < len(buffer):  # –í–ø—Ä–∞–≤–æ
                    cursor_pos += 1
                    redraw()

        elif char == '\r':
            sys.stdout.write('\n')
            break
            
        elif char == '\x7f' and cursor_pos > 0:  # Backspace
            cursor_pos -= 1
            buffer.pop(cursor_pos)
            redraw()
            
        elif char.isprintable():
            buffer.insert(cursor_pos, char)
            cursor_pos += 1
            redraw()
    
    return ''.join(buffer)

def menu(title, options, clr="white", select_clr="green", hint_clr="blue", cursor="> "):
    cursor_pos = 0
    RESET = '\033[0m'
    
    # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç, —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏
    texts = []
    funcs = []
    hints = []
    
    for opt in options:
        if isinstance(opt, tuple):
            if len(opt) == 3:  # —Ç–µ–∫—Å—Ç, —Ñ—É–Ω–∫—Ü–∏—è, –ø–æ–¥—Å–∫–∞–∑–∫–∞
                texts.append(opt[0])
                funcs.append(opt[1])
                hints.append(opt[2])
            else:  # —Ç–µ–∫—Å—Ç, —Ñ—É–Ω–∫—Ü–∏—è
                texts.append(opt[0])
                funcs.append(opt[1])
                hints.append("")
        else:  # –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
            texts.append(opt)
            funcs.append(None)
            hints.append("")
    
    def draw_menu():
        print("\033[H\033[J")  # –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞
        print(f"<{clr}|bold>{title}</{clr}|bold>\n")
        
        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—É–Ω–∫—Ç–æ–≤
        for idx, text in enumerate(texts):
            if idx == cursor_pos:
                print(f"<{select_clr}|bold>{cursor} {text}</{select_clr}|bold>{RESET}")
                if hints[idx]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞
                    print(f"  <{hint_clr}|italic>{hints[idx]}</{hint_clr}|italic>{RESET}")
            else:
                print(f"  {text}{RESET}")
    
    while True:
        draw_menu()
        char = get_char()
        
        if char == '\x1b':
            next1, next2 = get_char(), get_char()
            if next1 == '[':
                if next2 == 'A' and cursor_pos > 0:  # –í–≤–µ—Ä—Ö
                    cursor_pos -= 1
                elif next2 == 'B' and cursor_pos < len(texts) - 1:  # –í–Ω–∏–∑
                    cursor_pos += 1
                    
        elif char == '\r':  # Enter
            if funcs[cursor_pos]:
                funcs[cursor_pos]()
            return cursor_pos

class Form:
    def __init__(self, fields):
        self.fields = fields
        self.current = 0
        self.submit_button = SubmitButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
        
    def show(self):
        while True:
            print("\033[H\033[J")
            # –†–∏—Å—É–µ–º –ø–æ–ª—è
            for i, field in enumerate(self.fields):
                if i == self.current:
                    field.draw_active()
                else:
                    field.draw()
            
            # –†–∏—Å—É–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            if self.current == len(self.fields):
                self.submit_button.draw_active()
            else:
                self.submit_button.draw()
            
            char = get_char()
            if char == '\x1b':
                next1, next2 = get_char(), get_char()
                if next1 == '[':
                    if next2 == 'A': 
                        self.current = max(0, self.current - 1)
                    if next2 == 'B': 
                        self.current = min(len(self.fields), self.current + 1)
            elif char == '\r':
                if self.current == len(self.fields):
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏
                    return {field.label: field.get_value() for field in self.fields}
                else:
                    self.fields[self.current].activate()

class SubmitButton:
    def __init__(self, label):
        self.label = label
        
    def draw_active(self):
        print(f"\n<green|bold>> [{self.label}]</green|bold>")
        
    def draw(self):
        print(f"\n  [{self.label}]")

class TextField:
    def __init__(self, label, value=""):
        self.label = label
        self.value = value
        
    def get_value(self):
        return self.value
        
    def draw_active(self):
        print(f"<cyan|bold>> {self.label}: {self.value}_</cyan|bold>")
        
    def draw(self):
        print(f"  {self.label}: {self.value}")
        
    def activate(self):
        self.value = input(f"{self.label}: ", default=self.value)

class Checkbox:
    def __init__(self, label, checked=False):
        self.label = label
        self.checked = checked
        
    def get_value(self):
        return self.checked
        
    def draw_active(self):
        mark = "‚úì" if self.checked else " "
        print(f"<cyan|bold>> [{mark}] {self.label}</cyan|bold>")
        
    def draw(self):
        mark = "‚úì" if self.checked else " "
        print(f"  [{mark}] {self.label}")
        
    def activate(self):
        self.checked = not self.checked

def pick_date():
    import calendar
    import datetime
    
    current = datetime.datetime.now()
    
    while True:
        print("\033[H\033[J")
        print(calendar.month(current.year, current.month))
        
        char = get_char()
        if char == '\x1b':
            next1, next2 = get_char(), get_char()
            if next1 == '[':
                if next2 == 'D': current = current.replace(month=max(1, current.month-1))
                if next2 == 'C': current = current.replace(month=min(12, current.month+1))
        elif char == '\r':
            return current

def choose_color():
    colors = [
        ("red", "–ö—Ä–∞—Å–Ω—ã–π"),
        ("green", "–ó–µ–ª–µ–Ω—ã–π"),
        ("blue", "–°–∏–Ω–∏–π"),
        ("yellow", "–ñ–µ–ª—Ç—ã–π"),
        ("magenta", "–ü—É—Ä–ø—É—Ä–Ω—ã–π"),
        ("cyan", "–ì–æ–ª—É–±–æ–π")
    ]
    
    current = 0
    
    while True:
        print("\033[H\033[J")
        for i, (code, name) in enumerate(colors):
            if i == current:
                print(f"<{code}|bold>> {name}</{code}|bold>")
            else:
                print(f"<{code}>  {name}</{code}>")
                
        char = get_char()
        if char == '\x1b':
            next1, next2 = get_char(), get_char()
            if next1 == '[':
                if next2 == 'A': current = max(0, current-1)
                if next2 == 'B': current = min(len(colors)-1, current+1)
        elif char == '\r':
            return colors[current][0]

def floating_list(items, title="–í—ã–±–µ—Ä–∏—Ç–µ", position="center"):
    current = 0
    visible_items = 5
    RESET = '\033[0m'
    
    def draw_list():
        print("\033[H\033[J")
        print(f"<cyan|bold>{title}</cyan|bold>{RESET}\n")
        
        start = max(0, current - visible_items//2)
        end = min(len(items), start + visible_items)
        
        for i in range(start, end):
            if i == current:
                print(f"<green|bold>> {items[i]}</green|bold>{RESET}")
            else:
                print(f"  {items[i]}")
    
    while True:
        draw_list()
        char = get_char()
        
        if char == '\x1b':
            next1, next2 = get_char(), get_char()
            if next1 == '[':
                if next2 == 'A': current = max(0, current-1)
                if next2 == 'B': current = min(len(items)-1, current+1)
        elif char == '\r':
            return items[current]

@contextlib.contextmanager 
def cursor_at(x, y):
    """Move cursor to position"""
    print(f"\033[{y};{x}H", end='')
    try:
        yield
    finally:
        print("\033[0m", end='')

def split_screen():
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ —ç–∫—Ä–∞–Ω–∞"""
    width = os.get_terminal_size().columns
    height = os.get_terminal_size().lines
    
    # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
    separator = emojis['line_v']
    mid = width // 2
    
    for i in range(height):
        with cursor_at(mid, i):
            print(separator)
            
    return mid

def clear_side(side='left'):
    """–û—á–∏—â–∞–µ—Ç –ª–µ–≤—É—é –∏–ª–∏ –ø—Ä–∞–≤—É—é —á–∞—Å—Ç—å —ç–∫—Ä–∞–Ω–∞"""
    width = os.get_terminal_size().columns
    height = os.get_terminal_size().lines
    mid = width // 2
    
    clear = ' ' * (mid - 1 if side == 'left' else mid)
    for i in range(height):
        with cursor_at(0 if side == 'left' else mid + 1, i):
            print(clear)