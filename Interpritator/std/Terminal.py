from rich.progress import track, Progress
from rich.prompt import Prompt, Confirm
from rich.markdown import Markdown
from rich.console import Console
from rich.syntax import Syntax
from rich.layout import Layout
from rich.table import Table
from rich.panel import Panel
from rich.tree import Tree
from rich.live import Live

from typing import Tuple, Optional

import subprocess
import platform
import pyfiglet
import shutil
import sys
import os


class Terminal:
    def __init__(self):
        self.console = Console()
        self.emojis = {
            # –°—Ç–∞—Ç—É—Å—ã –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            'success': '‚úÖ',
            'error': '‚ùå',
            'info': 'i',
            'warning': '‚ö†Ô∏è',
            'debug': 'üîç',

            # –Ø–∑—ã–∫–∏ –∏ —Å—Ç—Ä–∞–Ω—ã
            'Russian': 'üá∑üá∫',
            'English': 'üá∫üá∏',
            'Chinese': 'üá®üá≥',
            'Japanese': 'üáØüáµ',
            'Korean': 'üá∞üá∑',
            'French': 'üá´üá∑',
            'Spanish': 'üá™üá∏',
            'German': 'üá©üá™',
            'Italian': 'üáÆüáπ',
            'Portuguese': 'üáßüá∑',

            # –î–µ–π—Å—Ç–≤–∏—è
            'save': 'üíæ',
            'edit': '‚úèÔ∏è',
            'delete': 'üóëÔ∏è',
            'search': 'üîé',
            'settings': '‚öôÔ∏è',
            'reload': 'üîÑ',
            'lock': 'üîí',
            'unlock': 'üîì',
            
            # –§–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏
            'file': 'üìÑ',
            'folder': 'üìÅ',
            'open_folder': 'üìÇ',
            'zip': 'üóúÔ∏è',
            
            # –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞
            'bug': '',
            'code': 'üë®‚Äçüíª',
            'rocket': 'üöÄ',
            'fire': 'üî•',
            'spark': '‚ú®',
            'hammer': 'üî®',
            'computer': 'üíª',

            # –ú–µ–¥–∏–∞
            'music': 'üéµ',
            'video': 'üé•',
            'camera': 'üì∑',
            'film': 'üé¨',

            # –°–æ–æ–±—â–µ–Ω–∏—è
            'message': 'üí¨',
            'chat': 'üó®Ô∏è',
            'comment': 'üëÅÔ∏è‚Äçüó®Ô∏è',
            
            # –í—Ä–µ–º—è
            'clock': 'üïê',
            'hourglass': '‚åõ',
            'calendar': 'üìÖ',
            'time': 'üïí',
            
            # –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è
            'mail': 'üìß',
            'bell': 'üîî',
            'phone': 'üì±',
            
            # –î—Ä—É–≥–∏–µ
            'wine': 'üç∑',
            'star': '‚≠ê',
            'heart': '‚ù§Ô∏è',
            'check': '‚úîÔ∏è',
            'cross': '‚úñÔ∏è',
            'question': '‚ùì',
            'light': 'üí°'
        }

        self.symbols = {
            # –°—Ç—Ä–µ–ª–∫–∏
            'arrow_right': '‚Üí',
            'arrow_left': '‚Üê',
            'arrow_up': '‚Üë',
            'arrow_down': '‚Üì',
            'arrow_double': '‚Üî',
            
            # –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ
            'infinity': '‚àû',
            'not_equal': '‚â†',
            'approx': '‚âà',
            'plus_minus': '¬±',
            'multiply': '√ó',
            'divide': '√∑',
            'sum': '‚àë',
            'sqrt': '‚àö',
            
            # –õ–æ–≥–∏—á–µ—Å–∫–∏–µ
            'and': '‚àß',
            'or': '‚à®',
            'xor': '‚äï',
            'forall': '‚àÄ',
            'exists': '‚àÉ',
            
            # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
            'bullet': '‚Ä¢',
            'diamond': '‚óÜ',
            'square': '‚ñ†',
            'circle': '‚óè',
            'triangle': '‚ñ≤',
            
            # –†–∞–º–∫–∏
            'box_h': '‚îÄ',
            'box_v': '‚îÇ',
            'box_dr': '‚îå',
            'box_dl': '‚îê',
            'box_ur': '‚îî',
            'box_ul': '‚îò',
            
            # –°—Ç–∞—Ç—É—Å—ã
            'check': '‚úì',
            'cross': '‚úó',
            'star': '‚òÖ',
            'note': '‚ô™',
            'warning': '‚ö†',
            
            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            'enter': '‚èé',
            'escape': '‚éã',
            'command': '‚åò',
            'option': '‚å•',
            'shift': '‚áß',
            'ctrl': '‚åÉ',
            
            # –£–≥–ª—ã
            'corner_dr': '‚ï≠',
            'corner_dl': '‚ïÆ',
            'corner_ur': '‚ï∞',
            'corner_ul': '‚ïØ',
            
            # –õ–∏–Ω–∏–∏
            'line_h': '‚îÄ',
            'line_h_bold': '‚îÅ',
            'line_v': '‚îÇ',
            'line_v_bold': '‚îÉ',
            
            # –¢-–æ–±—Ä–∞–∑–Ω—ã–µ
            'line_t_up': '‚î¥',
            'line_t_down': '‚î¨',
            'line_t_right': '‚îú',
            'line_t_left': '‚î§',
            
            # –î–≤–æ–π–Ω—ã–µ –ª–∏–Ω–∏–∏
            'double_h': '‚ïê',
            'double_v': '‚ïë',
            'double_dr': '‚ïî',
            'double_dl': '‚ïó',
            'double_ur': '‚ïö', 
            'double_ul': '‚ïù',
            
            # –ó–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ —É–≥–ª—ã
            'round_dr': '‚ï≠',
            'round_dl': '‚ïÆ',
            'round_ur': '‚ï∞',
            'round_ul': '‚ïØ',
            
            # –ü—É–Ω–∫—Ç–∏—Ä
            'dash_h': '‚îÑ',
            'dash_v': '‚îÜ',
            'dash_h_bold': '‚îÖ',
            'dash_v_bold': '‚îá',
            
            # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
            'cross': '‚îº',
            'cross_bold': '‚ïã',
            'cross_double': '‚ï¨'
        }

    def symbol(self, name):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª –ø–æ –∏–º–µ–Ω–∏"""
        return self.symbols.get(name, '')
    
    def add_symbol(self, name, symbol):
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–∏–º–≤–æ–ª –≤ —Å–ª–æ–≤–∞—Ä—å"""
        self.symbols[name] = symbol

    @staticmethod
    def get_size() -> Tuple[int, int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞"""
        return shutil.get_terminal_size()

    @staticmethod
    def set_title(title: str) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –æ–∫–Ω–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞"""
        if platform.system() == 'Windows':
            os.system(f'title {title}')
        else:
            sys.stdout.write(f'\x1b]2;{title}\x07')

    @staticmethod
    def move_cursor(x: int, y: int) -> None:
        """–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞"""
        print(f'\033[{y};{x}H', end='')

    @staticmethod
    def save_cursor() -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞"""
        print('\033[s', end='')

    @staticmethod
    def restore_cursor() -> None:
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞"""
        print('\033[u', end='')

    @staticmethod
    def hide_cursor() -> None:
        """–°–∫—Ä—ã—Ç–∏–µ –∫—É—Ä—Å–æ—Ä–∞"""
        print('\033[?25l', end='')

    @staticmethod
    def show_cursor() -> None:
        """–ü–æ–∫–∞–∑ –∫—É—Ä—Å–æ—Ä–∞"""
        print('\033[?25h', end='')

    @staticmethod
    def box(width: int, height: int, title: Optional[str] = None) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–º–∫–∏ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ"""
        horizontal = '‚îÄ' * (width - 2)
        print(f'‚îå{horizontal}‚îê')
        
        if title:
            title = f' {title} '
            pad_left = (width - len(title)) // 2
            print(f'‚îÇ{" " * pad_left}{title}{" " * (width - pad_left - len(title) - 2)}‚îÇ')
            print(f'‚îú{horizontal}‚î§')
            
        for _ in range(height - (3 if title else 2)):
            print(f'‚îÇ{" " * (width - 2)}‚îÇ')
        print(f'‚îî{horizontal}‚îò')

    @staticmethod
    def set_buffer_size(columns: int, lines: int) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –±—É—Ñ–µ—Ä–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞"""
        if platform.system() == 'Windows':
            os.system(f'mode con: cols={columns} lines={lines}')

    @staticmethod
    def enable_alternative_buffer() -> None:
        """–í–∫–ª—é—á–µ–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞"""
        print('\033[?1049h', end='')

    @staticmethod
    def disable_alternative_buffer() -> None:
        """–í—ã–∫–ª—é—á–µ–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞"""
        print('\033[?1049l', end='')

    @staticmethod
    def set_scrolling_region(top: int, bottom: int) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏"""
        print(f'\033[{top};{bottom}r', end='')

    @staticmethod
    def enable_line_wrap() -> None:
        """–í–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫"""
        print('\033[?7h', end='')

    @staticmethod
    def disable_line_wrap() -> None:
        """–í—ã–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫"""
        print('\033[?7l', end='')

    @staticmethod
    def terminal_info() -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ"""
        return {
            'size': shutil.get_terminal_size(),
            'type': os.environ.get('TERM'),
            'encoding': sys.stdout.encoding,
            'platform': platform.system(),
            'is_interactive': sys.stdout.isatty()
        }

    def emoji(self, name):
        """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        return self.emojis.get(name, '')
    
    def add_emoji(self, name, emoji_symbol):
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —ç–º–æ–¥–∑–∏ –≤ —Å–ª–æ–≤–∞—Ä—å"""
        self.emojis[name] = emoji_symbol

    def paint(self, text, style=None):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π print —Å —Ü–≤–µ—Ç–∞–º–∏ –∏ —Å—Ç–∏–ª—è–º–∏"""
        self.console.print(text, style=style)
    
    def success(self, text):
        """–ë—ã—Å—Ç—Ä—ã–π –≤—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.paint(f"‚úÖ {text}", style="green")
    
    def error(self, text):
        """–ë—ã—Å—Ç—Ä—ã–π –≤—ã–≤–æ–¥ –æ—à–∏–±–æ–∫"""
        self.paint(f"‚ùå {text}", style="red bold")
    
    def info(self, text):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        self.paint(f"‚ÑπÔ∏è {text}", style="blue")
    
    def warning(self, text):
        """–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
        self.paint(f"‚ö†Ô∏è {text}", style="yellow")

    def table(self, headers, rows, title=None):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü"""
        table = Table(title=title, show_header=True, header_style="bold magenta")
        for header in headers:
            table.add_column(header)
        for row in rows:
            table.add_row(*row)
        self.console.print(table)
    
    def progress(self, items):
        """–£–ø—Ä–æ—â—ë–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
        return track(items, description="Processing...")
    
    def advanced_progress(self):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –∑–∞–¥–∞—á"""
        return Progress()
    
    def code(self, code, language="python"):
        """–ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –∫–æ–¥–∞"""
        syntax = Syntax(code, language, theme="monokai")
        self.console.print(syntax)
    
    def panel(self, content, title=None):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–µ–π —Å —Ä–∞–º–∫–æ–π"""
        panel = Panel(content, title=title)
        self.console.print(panel)
    
    def markdown(self, markdown_text):
        """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ Markdown"""
        md = Markdown(markdown_text)
        self.console.print(md)
    
    def tree(self, name):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        return Tree(name)
    
    def input(self, prompt, password=False):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–≤–æ–¥ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π"""
        return Prompt.ask(prompt, password=password)

    def print_ascii(self, text='text', font='standard', width=80):
        fig = pyfiglet.Figlet(font=font, width=width)
        return fig.renderText(text)

    def confirm(self, question):
        """–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
        return Confirm.ask(question)
    
    def layout(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞"""
        return Layout()
    
    def live(self):
        """–ñ–∏–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        return Live()
    
    def clear(self):
        """–û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞"""
        self.console.clear()

    def rule(self, title=None):
        """–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º"""
        self.console.rule(title)

    def status(self, text):
        """–°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å —Å–ø–∏–Ω–Ω–µ—Ä–æ–º"""
        return self.console.status(text)
