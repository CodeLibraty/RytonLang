
import os as osystem
import sys as system
import time as timexc

from asyncio import *
from functools import *
from typing import *

import dataclasses, threading

from py4j.java_gateway import JavaGateway
from cffi import FFI
from ZigLang.Bridge import ZigBridge
from std.MetaTable import MetaTable
import ctypes.util

from stdFunction import *
from UpIO import *
from DataTypes import *

osystem.chdir("/home/rejzi/projects/CLI/RytonLang-PyPy")

gateway = JavaGateway()
parallel = Parallel().parallel()
from std.QuantUI import *


qui = connect().root

@autothis

class Calculator :
    
    def calculate(result, display) :
        expr = "".join(result)
        try :
            result[0] = str(eval(expr))
            result.clear()  # Очищаем массив
            result.append(str(eval(expr)))  # Добавляем только результат
        except :
            result[0] = "Error"
        qui.set_text(display, result[0])
    
    
    def append_digit(btn, result, display) :
        if result[0] == "0" or result[0] == "Error" :
            result[0] = btn  # Заменяем начальный 0 или Error
        else :
            result.append(btn)
        qui.set_text(display, "".join(result))
    
    
    def clear(result, display) :
        result[0] = "0"
        qui.set_text(display, "0")
    
    
    def Main() :
        window = qui.create_app()
        
        # Основной вертикальный лейаут
        layout = qui.create_widget("BoxLayout")
        
        # Дисплей
        display = qui.create_widget("Label", text="0")
        qui.add_widget(layout, display)
        
        # Сетка кнопок
        grid = qui.create_widget("GridLayout")
        qui.add_widget(layout, grid)
        
        that = self
        result = ["0"]
        
        buttons = [
        "7", "8", "9", "/",
        "4", "5", "6", "*",
        "1", "2", "3", "-",
        "0", "C", "=", "+",
        ".",
        ]
        
        for btn in buttons :
            button = qui.create_widget("Button", text=btn)
            qui.add_widget(grid, button)
            
            if btn == "=" :
                qui.bind(button, lambda _:  that.calculate(result, display))
            elif btn == "C" :
                qui.bind(button, lambda _:  that.clear(result, display))
            else :
                # Создаем функцию-замыкание для каждой кнопки
                
                def make_handler(digit) :
                    return lambda _:  that.append_digit(digit, result, display)
                qui.bind(button, make_handler(btn))
        
        qui.run()

def Main(): 
    Calculator().Main()


Main()