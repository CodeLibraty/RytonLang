module import {
    std.Core.stdTypes
    std.Core.stdModifiers
    std.Core.stdFunctions
    std.Shell
    std.Files
    std.SysInfo
    std.fStrings
}

def userName:String = runCmdOutput("whoami")

pack DeltaShell { 
    func currentDir:String => runCmdOutput("pwd").replace(f"/home/{userName}", "~")

    func commandExecute(command: String) {
        val command = command.split(" ")
        if command[0] == "cd" => print(runCmdOutput(f"cd {command[1]}"))
        else => print(runCmdOutput(command.join(" ")))
    }

    func UIShell {
        def command = " "
        infinit 10 {
            command = input(f"{userName}#[{this.currentDir()}]> ")
            if command == "exit" => break
            elif command == "" => noop
            else => this.commandExecute(command)
        }
    }
}

func Main => DeltaShell().UIShell()

</
// not work structure
struct Person {
    <String
        val name = "Ryton"
        def nonema = "As"
    >
    <Int
        def age = 18
        val age2 = 19
    >
}
//


def text = "Ers"; print(text)

func Sas => 
    func Sas1 => func Sas2 =>
        func Sas3 =>
            print()

func sas { noop }

func aa() { 
    noop
}

def aa = lambda() => noop

func nested => if a => if b => if c => print("ABC"); else => noop; else => noop; else => noop

func MyFunc(arg: String):Bool !(trace) { noop }

func factorial(n: Int):Int => if n <= 1 => output 1 
else =>
    output n * factorial(n - 1)

func myFunction => if hi == True {
    print("Hello World!")
} else => noop

func myFunction(name: ?String) => if name == "Ryton" {
    while name == "Ryton" => print("Hello World!")
}

pack Parser => 
    func parse(text: String) => 
        while not text.empty {
            if char.isDigit => parseNumber()
            elif char.isLetter => parseWord()
        }

while True {
    print("Hello World!")
}

while 1 == 18 and 2 == 2 or 3 == 3 => print("Я хочу пиццы")

pack Simple => func simple => 
    if name => if name => print("Simple nahuy")

pack sas <- Par !(mode, ssaa, d) {
    func ign => noop
}

pack Package {
    init {
        mu
    }

    func myFunction(name: !String) {
        print("Hello World!", name)
    }

    func Main {
        print("HI! I Ryton App")
        <String> def name = input("Enter your name: ")
        pause(1000)
        
        print("Hello ", name, "!")
        <Int> def age = toInt(input("Enter your age: "))
        pause(1000)
        
        if age < 18 => print("You are not old enough to enter this site!") 
        elif age > 18 {
            print("You are old enough to enter this site!")
        } 
        else => print("You old!") 

        print("You are ", age)

    }
}

def package = mysd.Package(sas, 10, "kdkd", [1, 2, 3])
package.myFunction("sas")
package.Main()

/>
</ planed syntax
    func main[T](@staticArg: Int, ->refArg: String, def myGeneric: T) {}

    <Array:private `inline`> def myArray = ["Hello", "World"]
/>
