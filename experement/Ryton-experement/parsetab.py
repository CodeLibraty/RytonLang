
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN CONST DIVIDE ELSE FUNC IDENTIFIER IF LBRACE LPAREN MINUS NUMBER PLUS RBRACE RPAREN STRING TIMES VAR WHILEprogram : statementsstatements : statement\n                  | statements statementstatement : var_declaration\n                 | func_declaration\n                 | assignment\n                 | if_statement\n                 | while_statementvar_declaration : VAR IDENTIFIER ASSIGN expressionfunc_declaration : FUNC IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACEparameters : IDENTIFIER\n                  | parameters IDENTIFIERassignment : IDENTIFIER ASSIGN expressionif_statement : IF LPAREN expression RPAREN LBRACE statements RBRACEwhile_statement : WHILE LPAREN expression RPAREN LBRACE statements RBRACEexpression : IDENTIFIER\n                  | NUMBER\n                  | STRING\n                  | expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression'
    
_lr_action_items = {'VAR':([0,2,3,4,5,6,7,8,14,21,22,23,24,28,37,38,39,40,43,44,45,46,47,48,49,50,51,],[9,9,-2,-4,-5,-6,-7,-8,-3,-16,-13,-17,-18,-9,-19,-20,-21,-22,9,9,9,9,9,9,-14,-15,-10,]),'FUNC':([0,2,3,4,5,6,7,8,14,21,22,23,24,28,37,38,39,40,43,44,45,46,47,48,49,50,51,],[11,11,-2,-4,-5,-6,-7,-8,-3,-16,-13,-17,-18,-9,-19,-20,-21,-22,11,11,11,11,11,11,-14,-15,-10,]),'IDENTIFIER':([0,2,3,4,5,6,7,8,9,11,14,16,18,19,20,21,22,23,24,25,28,29,30,31,32,33,34,37,38,39,40,41,43,44,45,46,47,48,49,50,51,],[10,10,-2,-4,-5,-6,-7,-8,15,17,-3,21,21,21,21,-16,-13,-17,-18,33,-9,21,21,21,21,-11,41,-19,-20,-21,-22,-12,10,10,10,10,10,10,-14,-15,-10,]),'IF':([0,2,3,4,5,6,7,8,14,21,22,23,24,28,37,38,39,40,43,44,45,46,47,48,49,50,51,],[12,12,-2,-4,-5,-6,-7,-8,-3,-16,-13,-17,-18,-9,-19,-20,-21,-22,12,12,12,12,12,12,-14,-15,-10,]),'WHILE':([0,2,3,4,5,6,7,8,14,21,22,23,24,28,37,38,39,40,43,44,45,46,47,48,49,50,51,],[13,13,-2,-4,-5,-6,-7,-8,-3,-16,-13,-17,-18,-9,-19,-20,-21,-22,13,13,13,13,13,13,-14,-15,-10,]),'$end':([1,2,3,4,5,6,7,8,14,21,22,23,24,28,37,38,39,40,49,50,51,],[0,-1,-2,-4,-5,-6,-7,-8,-3,-16,-13,-17,-18,-9,-19,-20,-21,-22,-14,-15,-10,]),'RBRACE':([3,4,5,6,7,8,14,21,22,23,24,28,37,38,39,40,46,47,48,49,50,51,],[-2,-4,-5,-6,-7,-8,-3,-16,-13,-17,-18,-9,-19,-20,-21,-22,49,50,51,-14,-15,-10,]),'ASSIGN':([10,15,],[16,20,]),'LPAREN':([12,13,17,],[18,19,25,]),'NUMBER':([16,18,19,20,29,30,31,32,],[23,23,23,23,23,23,23,23,]),'STRING':([16,18,19,20,29,30,31,32,],[24,24,24,24,24,24,24,24,]),'PLUS':([21,22,23,24,26,27,28,37,38,39,40,],[-16,29,-17,-18,29,29,29,29,29,29,29,]),'MINUS':([21,22,23,24,26,27,28,37,38,39,40,],[-16,30,-17,-18,30,30,30,30,30,30,30,]),'TIMES':([21,22,23,24,26,27,28,37,38,39,40,],[-16,31,-17,-18,31,31,31,31,31,31,31,]),'DIVIDE':([21,22,23,24,26,27,28,37,38,39,40,],[-16,32,-17,-18,32,32,32,32,32,32,32,]),'RPAREN':([21,23,24,26,27,33,34,37,38,39,40,41,],[-16,-17,-18,35,36,-11,42,-19,-20,-21,-22,-12,]),'LBRACE':([35,36,42,],[43,44,45,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,43,44,45,],[2,46,47,48,]),'statement':([0,2,43,44,45,46,47,48,],[3,14,3,3,3,14,14,14,]),'var_declaration':([0,2,43,44,45,46,47,48,],[4,4,4,4,4,4,4,4,]),'func_declaration':([0,2,43,44,45,46,47,48,],[5,5,5,5,5,5,5,5,]),'assignment':([0,2,43,44,45,46,47,48,],[6,6,6,6,6,6,6,6,]),'if_statement':([0,2,43,44,45,46,47,48,],[7,7,7,7,7,7,7,7,]),'while_statement':([0,2,43,44,45,46,47,48,],[8,8,8,8,8,8,8,8,]),'expression':([16,18,19,20,29,30,31,32,],[22,26,27,28,37,38,39,40,]),'parameters':([25,],[34,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','RytonOne(dumpling).py',70),
  ('statements -> statement','statements',1,'p_statements','RytonOne(dumpling).py',74),
  ('statements -> statements statement','statements',2,'p_statements','RytonOne(dumpling).py',75),
  ('statement -> var_declaration','statement',1,'p_statement','RytonOne(dumpling).py',82),
  ('statement -> func_declaration','statement',1,'p_statement','RytonOne(dumpling).py',83),
  ('statement -> assignment','statement',1,'p_statement','RytonOne(dumpling).py',84),
  ('statement -> if_statement','statement',1,'p_statement','RytonOne(dumpling).py',85),
  ('statement -> while_statement','statement',1,'p_statement','RytonOne(dumpling).py',86),
  ('var_declaration -> VAR IDENTIFIER ASSIGN expression','var_declaration',4,'p_var_declaration','RytonOne(dumpling).py',90),
  ('func_declaration -> FUNC IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE','func_declaration',8,'p_func_declaration','RytonOne(dumpling).py',94),
  ('parameters -> IDENTIFIER','parameters',1,'p_parameters','RytonOne(dumpling).py',98),
  ('parameters -> parameters IDENTIFIER','parameters',2,'p_parameters','RytonOne(dumpling).py',99),
  ('assignment -> IDENTIFIER ASSIGN expression','assignment',3,'p_assignment','RytonOne(dumpling).py',106),
  ('if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE','if_statement',7,'p_if_statement','RytonOne(dumpling).py',110),
  ('while_statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE','while_statement',7,'p_while_statement','RytonOne(dumpling).py',114),
  ('expression -> IDENTIFIER','expression',1,'p_expression','RytonOne(dumpling).py',118),
  ('expression -> NUMBER','expression',1,'p_expression','RytonOne(dumpling).py',119),
  ('expression -> STRING','expression',1,'p_expression','RytonOne(dumpling).py',120),
  ('expression -> expression PLUS expression','expression',3,'p_expression','RytonOne(dumpling).py',121),
  ('expression -> expression MINUS expression','expression',3,'p_expression','RytonOne(dumpling).py',122),
  ('expression -> expression TIMES expression','expression',3,'p_expression','RytonOne(dumpling).py',123),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','RytonOne(dumpling).py',124),
]
